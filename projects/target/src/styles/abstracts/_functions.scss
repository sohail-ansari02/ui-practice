// -----------------------------------------------------------------------------
// This file contains all application-wide Sass functions.
// -----------------------------------------------------------------------------
@use "sass:math";
/// Native `url(..)` function wrapper
/// @param {String} $base - base URL for the asset
/// @param {String} $type - asset type folder (e.g. `fonts/`)
/// @param {String} $path - asset path
/// @return {Url}
@function -asset($base, $type, $path) {
  @return url($base + $type + $path);
}

/// Returns URL to an image based on its path
/// @param {String} $path - image path
/// @param {String} $base [$base-url] - base URL
/// @return {Url}
/// @require $base-url
@function image($path, $base: $base-url) {
  @return asset($base, "images/", $path);
}

/// Returns URL to a font based on its path
/// @param {String} $path - font path
/// @param {String} $base [$base-url] - base URL
/// @return {Url}
/// @require $base-url
@function font($path, $base: $base-url) {
  @return asset($base, "fonts/", $path);
}


//convert pixel value to rem unit(s)
@function toRem($pixel) {
  @if (math.is-unitless($pixel)) {
    @return math.div($pixel, 16) + rem;
  } @else {
    @error "Don't use units when using toRem() function; use only number.";
  }
}

//convert pixel value to em unit(s)
@function toEm($pixel) {
  @if (math.is-unitless($pixel)) {
    @return math.div($pixel, 16) + em;
  } @else {
    @error "Don't use units when using toEem() function; use only number.";
  }
}

/// Get a z-index value from a layer name
/// @access public
/// @param {String} $layer - Layerâ€™s name
/// @return {Number}
/// @require $z-indexes
@function z($layer) {
  @return map-get($z-indexes, $layer);
}
